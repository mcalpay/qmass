{{{
// debug parameter is unused
// code to the interfaces where possible use List as the return parameter type instead of LinkedList
public LinkedList findOrdersForProduct(Product p, boolean debug) {
// use more descriptive variable names
// code to interface use a List on the left side of the assignment
    ArrayList l = new ArrayList();

//  parameterizing 'list' variable would make this method more reusable
//  give this variable a better name like 'orders' or 'allOrders'
    ArrayList list = getAllOrders();

//  use the java5 loop construct for better readability and avoiding unnecessray variable definitions
    for (int i=0; i<list.size(); i++) {
// this should be list.get(i) I believe
        Order order = (Order) list.get(0);
        boolean found = false;

        if (order.getProducts().size() > 0) {
            for (int j=0; j<=order.getProducts().size(); j++) {
                Product p2 = order.getProducts().get(j);
// below line and logic makes this loop useless, by doing this you are only checking the last member of the products, if it's your intent you can do that with a simple if check
                found = (p2 == p);
            }

            if (found && order != null)
                l.add(order);
        }
    }
// why convert to a LinkedList. You could have defined 'l' as a LinkedList at the first place 
    return new LinkedList(l);
}

}}}