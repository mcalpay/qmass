#summary QMass API

= Introduction =

QMass is a Clustering solution for Enterprise applications.


= Hibernate Support =
An example persistence.xml definition using QMass would be like :
{{{
<persistence xmlns="http://java.sun.com/xml/ns/persistence"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xsi:schemaLocation="http://java.sun.com/xml/ns/persistence 
   http://java.sun.com/xml/ns/persistence/persistence_1_0.xsd"
             version="1.0">
    <persistence-unit name="mypersistence" transaction-type="JTA">
        <provider>org.hibernate.ejb.HibernatePersistence</provider>
        <jta-data-source>yourdatasource</jta-data-source>
        <properties>
            <property name="hibernate.dialect" value="org.hibernate.dialect.Oracle10gDialect"/>
            <property name="hibernate.cache.use_query_cache" value="true"/>
            <property name="hibernate.cache.use_second_level_cache" value="true"/>
            <property name="hibernate.cache.provider_class" 
   value="org.mca.qmass.cache.hibernate.provider.QMassHibernateCacheProvider"/>
            <property name="qmass.cluster" value="localhost,6661,6670/"/>
            <property name="qmass.name" value="myproject"/>
            <property name="qmass.replicate.updates" value="false"/>
            <property name="qmass.replicate.inserts" value="false"/>
        </properties>
    </persistence-unit>
</persistence>
}}}
QMass cache provider :
{{{
<property name="hibernate.cache.provider_class" 
   value="org.mca.qmass.cache.hibernate.provider.QMassHibernateCacheProvider"/>
}}}
Define the cluster IP and port range :
{{{
<property name="qmass.cluster" value="10.10.10.112,6661,6670/10.10.10.113,6661,6670/"/>
}}}
You could use multicast communication instead :
{{{
<property name="qmass.multicast.cluster" value="230.0.0.1"/>
}}}
Upon start each application will try to allocate a port and greet others in the port range.
By default QMass Cache will propagate the invalidations across cluster. To serialize and propagate the inserted values and updates you may use these properties :
{{{
<property name="qmass.replicate.updates" value="true"/>
<property name="qmass.replicate.inserts" value="true"/>
}}}
Instead of using cache provider you may also use region factory :
{{{
<property name="hibernate.cache.region.factory_class"
   value="org.mca.qmass.cache.hibernate.factory.QMassRegionFactory"/>
}}}