#summary QMass API

<wiki:toc max_depth="1" />

= Introduction =

QMass is a Clustering solution for Enterprise applications.
----
= IR for Configuring QMass =
Apart from configuring QMass using app./framework specific methods, like Hibernate properties, you could use the IR api.

QMass could be configured using _/ir.properties_ file and a configuration class that implements _org.mca.qmass.core.ir.QMassIR_ .

An IR file on the classpath, with the line :
{{{
default,QMassIR=org.mca.qmass.web.ir.MyIR
}}}
will use the _MyIR_ as the configuration class for the QMass instance with _"default"_ id.

Here is how your configuration class _MyIR_ should look like :
{{{
public class MyIR extends org.mca.qmass.core.ir.DefaultQMassIR {

    @Override
    public String getMulticastAddress() {
        return "230.0.0.1";
    }
    
}
}}}

The default configuration is overridden and QMass is configured with the specified multicast address.
----
= Hibernate Support =
An example persistence.xml definition using QMass would be like :
{{{
<persistence xmlns="http://java.sun.com/xml/ns/persistence"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xsi:schemaLocation="http://java.sun.com/xml/ns/persistence 
   http://java.sun.com/xml/ns/persistence/persistence_1_0.xsd"
             version="1.0">
    <persistence-unit name="mypersistence" transaction-type="JTA">
        <provider>org.hibernate.ejb.HibernatePersistence</provider>
        <jta-data-source>yourdatasource</jta-data-source>
        <properties>
            <property name="hibernate.dialect" value="org.hibernate.dialect.Oracle10gDialect"/>
            <property name="hibernate.cache.use_query_cache" value="true"/>
            <property name="hibernate.cache.use_second_level_cache" value="true"/>
            <property name="hibernate.cache.provider_class" 
   value="org.mca.qmass.cache.hibernate.provider.QMassHibernateCacheProvider"/>
            <property name="qmass.cluster" value="localhost,6661,6670/"/>
            <property name="qmass.name" value="myproject"/>
            <property name="qmass.replicate.updates" value="false"/>
            <property name="qmass.replicate.inserts" value="false"/>
        </properties>
    </persistence-unit>
</persistence>
}}}
QMass cache provider :
{{{
<property name="hibernate.cache.provider_class" 
   value="org.mca.qmass.cache.hibernate.provider.QMassHibernateCacheProvider"/>
}}}
Instead of using cache provider you may also use region factory :
{{{
<property name="hibernate.cache.region.factory_class"
   value="org.mca.qmass.cache.hibernate.factory.QMassRegionFactory"/>
}}}
== Discovering Cluster with IP Port Scan==
Define the cluster IP and port range (defaults to localhost,6661,6670/) :
{{{
<property name="qmass.cluster" value="10.10.10.112,6661,6670/10.10.10.113,6661,6670/"/>
}}}
Upon start each application will try to allocate a port and greet others in the port range.
==Multicast IP==
Instead of using the above method you could use multicast ip for communication :
{{{
<property name="qmass.multicast.cluster" value="230.0.0.1"/>
}}}
Port which will be used to write to (defaults to 4445):
{{{
<property name="qmass.multicast.writeport" value="4445"/>
}}}
This port will be incremented until a free port is found.

Port to read from (defaults to 4444):
{{{
<property name="qmass.multicast.readport" value="4444"/>
}}}
==Serialize/Deserialize Values==
By default QMass Cache will propagate the invalidations across cluster. To serialize and propagate the inserted values and updates you may use these properties :
{{{
<property name="qmass.replicate.updates" value="true"/>
<property name="qmass.replicate.inserts" value="true"/>
}}}
----
= Session Sharing =
QMass allows you to replicate session data amongst, applications.

You have to define the _QMassFilter_ on _web.xml_ :
{{{
    <filter>
        <filter-name>QMassFilter</filter-name>
        <filter-class>org.mca.qmass.http.filters.QMassFilter</filter-class>
    </filter>

    <filter-mapping>
        <filter-name>QMassFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>
}}}
By default QMass will try to replicate all the session attributes.
----
= Change The Log Levels Cluster Wide =
A Simple example application changing the application log levels cluster wide, works with log4j :
{{{
new DefaultLogService("logService",QMass.getQMass()).changeLog("org.apache.myfaces","DEBUG");
}}}
Constructor creates and registers it self as a service on the QMass. Services could be accessed using qmass getService method whit an id ("logService" in this case).